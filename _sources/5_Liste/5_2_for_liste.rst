Итерација кроз листу for петљом
================================


.. infonote:: Подсетник
    
    **for петља** је структура у програмирању која омогућава да се одређени део кода извршава више пута, пролазећи кроз елементе колекције, као што су листе, речници, стрингови и друге итерирајуће структуре података. У Пајтону, `for` петља је веома моћан алат за итерирање кроз секвенце података.

    **Синтакса for петље**

    Основна синтакса `for` петље у Пајтону изгледа овако:

    .. code-block:: python

        for element in kolekcija:
            # Операције које желимо да извршимо са 'element'


    - **element** је привремена променљива која узима вредност сваког елемента у колекцији (листи, речнику, стрингу итд).
    - **kolekcija** је итерирајућа структура (нпр. листа) кроз коју петља пролази.


Итерирање кроз листу значи да пролазимо кроз сваки елемент листе и можемо га користити у коду. Ево неколико примера како можемо итерирати кроз листу.

**Пример 1: Пролазак for петљом кроз листу**

Када користимо `for` петљу за пролаз кроз листу у Пајтону, можемо обавити одређену радњу са сваким елементом у листи, редом, од првог до последњег. 


Замислимо да имамо листу бројева и желимо да испишемо сваки број појединачно:

.. activecode:: for2  
   :coach:

   brojevi = [1, 2, 3, 4, 5]

   for broj in brojevi:
       
	   print(broj)


.. infonote:: Објашњење

    1. `brojevi` је листа која садржи елементе `[1, 2, 3, 4, 5]`.
    2. `for broj in brojevi:` - Овде `for` петља пролази кроз сваки елемент у листи `brojevi`. Променљива `broj` ће редом узимати вредности сваког елемента у листи.
    3. `print(broj)` - За сваки елемент (тј. за сваку вредност коју `broj` узме), извршава се ова наредба, која исписује тренутну вредност `broj`.

    Резултат исписа:

    .. code-block::

        1
        2
        3
        4
        5




**Пример 2:**

Ако желимо да прођемо кроз све елементе у листи и испишемо их, то можемо урадити овако:

.. activecode:: forliste2
   :coach:

   filmovi = ["Титаник", "Господар прстенова", "Матрикс"]

   for film in filmovi:
       print(film)




**Пример 3: Израчунавање суме свих бројева у листи**

.. activecode:: forliste3
   :coach:

   brojevi = [1, 2, 3, 4, 5]
   suma = 0

   for broj in brojevi:
       suma += broj

   print("Сума свих бројева у листи је:", suma)


**Пример 4: Провера свих елемената листе**

.. activecode:: forliste4
   :coach:

   ocene = [5, 6, 8, 10, 9]

   for ocena in ocene:
       if ocena >= 9:
           print("Одлична оцена", ocena)


Индексирање елемената листе у `for` петљи:
--------------------------------------------

Ако нам је потребно да приступимо и **индексу** елемента током итерирања, можемо користити функцију **enumerate()**.

**Пример 6: Приказ индекса и вредности елемената**

.. activecode:: forliste6
   :coach:
   
   filmovi = ["Titanik", "Господар прстенова", "Матрикс"]

   for indeks, film in enumerate(filmovi):
       print("Филм", film, "је на индексу", indeks)


Угњежђене for петље:
----------------------

`for` петље могу бити угњежђене, што значи да можемо имати једну `for` петљу унутар друге. Ово је корисно када радимо са листама које садрже друге листе (нпр. 2D листе).

**Пример 7: Итерирање кроз 2D листу**

.. code-block:: python
   
   
    ocene_studenata = [
        [8, 9, 10],    # Оцене првог студента
        [7, 6, 9],     # Оцене другог студента
        [10, 10, 9]    # Оцене трећег студента
    ]

    for student in ocene_studenata:
        for ocena in student:
            print(ocena, end=" ")
        print()  # Прелазак у нови ред након сваког студента

Програм исписује: 

.. code-block:: python

    8 9 10 
    7 6 9
    10 10 9

**Прекидање и настављање петље:**

Можемо користити наредбе **break** и **continue** да контролишемо ток петље:
- **break** прекида извршавање петље.
- **continue** прескаче тренутну итерацију и наставља са следећом.

**Пример 8: Прекидање петље са `break`**

.. activecode:: forliste8
   :coach:

   brojevi = [1, 2, 3, 4, 5]

   for broj in brojevi:
       if broj == 3:
           break
       print(broj)


**Пример 9: Прескакање итерације са `continue`**

.. activecode:: forliste9
   :coach:
   
   brojevi = [1, 2, 3, 4, 5]

   for broj in brojevi:
       if broj == 3:
           continue
       print(broj)


For петља при проласку кроз елементе колекције
---------------------------------------------------


У Пајтону, `for` петља служи за понављање одређених радњи више пута, по елементима неке колекције (као што су листе, речници, скупови, итд.)
или унутар одређеног интервала вредности. Са `for` петљом можемо проћи кроз сваки елемент одређене секвенце и извршити неку радњу за сваки од њих. 
Ово је корисно за обраду великих количина података, омогућавајући да се сваки елемент обради појединачно и са лакоћом, без потребе за додатним 
условима и мануелним праћењем позиције унутар секвенце.


Основна синтакса:

.. code-block:: python

   for element in sekvenca:  
       # овде иде кôд који ће се извршити за сваки елемент


- `елемент` представља променљиву која узима вредност сваког појединачног елемента из секвенце.
- `секвенца` је колекција елемената кроз које петља пролази.



Сваки пут када `for` петља прође кроз петљу, она узима следећи елемент у листи и извршава кôд унутар блока `for` за тај елемент. 
Овим приступом можемо обављати разне операције на елементима листе, попут сабирања, провере услова...

.. activecode:: for3  
   :coach:

   voce = ["jabuka", "banana", "kruška"]
   for vocka in voce:
       print(vocka)

**Пример 10: Испис свих комбинација елемената из две листе**

Замислимо да имамо две листе, једну са бојама и једну са предметима, и желимо да направимо комбинације сваке боје са сваким предметом.

.. activecode:: for7  
   :coach:

   boje = ["црвена", "плава", "зелена"]
   predmeti = ["мајица", "панталоне", "капа"]

   for boja in boje:
       for predmet in predmeti:
           print(boja, predmet)


.. infonote:: Објашњење:

    1. `boje` је листа која садржи три боје: `"црвена"`, `"плава"`, `"зелена"`.
    2. `predmeti` је листа са три предмета: `"мајица"`, `"панталоне"`, `"капа"`.
    3. Спољашња `for` петља (`for boja in boje:`) пролази кроз сваки елемент у листи `boje`. За сваки елемент у `boje`, унутрашња `for` петља (`for predmet in predmeti:`) пролази кроз сваки елемент у листи `predmeti`.
    4. `print(boja, predmet)` - За сваку комбинацију боје и предмета, исписује се тренутна комбинација.

    Резултат исписа:

    .. code-block:: python

        црвена мајица
        црвена панталоне
        црвена капа
        плава мајица
        плава панталоне
        плава капа
        зелена мајица
        зелена панталоне
        зелена капа


Како функционише:

- Спољашња петља бира једну боју и почиње унутрашњу петљу.
- Унутрашња петља затим пролази кроз све предмете са том бојом, стварајући комбинације.
- Када унутрашња петља заврши са свим предметима за једну боју, спољашња петља узима следећу боју и унутрашња петља почиње изнова са свим предметима.
