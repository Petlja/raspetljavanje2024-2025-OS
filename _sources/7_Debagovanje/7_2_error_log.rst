Error Log
==============================================

Када пишемо програм у Паjтону, понекад се догоде грешке. Када дође до грешке, Паjтон нам даје посебан текст који се зове **error log**. У овој лекцији ћемо научити шта је error log и како да га читамо.



.. questionnote:: Шта је Error Log?


**Error log** је као порука о томе шта није у реду у нашем програму. Он нам показује:

1. **Где се десила грешка** (у ком делу кода)
2. **Каква је грешка** (какав проблем је настао)



Када покушамо да извршимо кôд и дође до грешке, добићемо нешто попут овога:

.. code-block:: python
   
   
   Traceback (most recent call last):
     File "име_фајла.py", line 10, in <module>
       neki_funkcija()
     File "име_фајла.py", line 5, in neki_funkcija
       print(1 / 0)
   ZeroDivisionError: division by zero



**Шта ово значи?**


1. **Traceback**: Ово показује да је програм наишао на проблем.
2. **File "име_фајла.py"**: Овде нам каже у којем фајлу се десила грешка.
3. **line 10**: Ово нам показује у којој линији кода је дошло до проблема.
4. **ZeroDivisionError**: Ово нам говори да смо покушали да делимо бројем нула, што није могуће.


**Како читати Error Log?**


1. **Погледајте прву линију**: Ово вам говори да је дошло до проблема.
2. **Погледајте име фајла**: Сазнајте у ком фајлу се проблем десио.
3. **Погледајте број линије**: Ово вам показује где тачно у коду треба да погледате.
4. **Прочитајте тип грешке**: Ово вам помаже да сазнате шта није у реду.

**Пример анализе Error Logа**




Замислите да имамо следећи код:

.. activecode:: errorlog2
   :coach:
   
   def podeli(a, b):
       return a / b

   rezultat = podeli(10, 0)
   print(rezultat)



Ако покренемо овај кôд, добићемо:

.. code-block:: python
   
   
   Traceback (most recent call last):
     File "example.py", line 5, in <module>
       rezultat = podeli(10, 0)
     File "example.py", line 2, in podeli
       return a / b
   ZeroDivisionError: division by zero




*Анализа:*

- *Где?*: У фајлу `example.py`, на линији 5.
- *Шта?*: У функцији `podeli` на линији 2.
- *Тип грешке*: Не можемо делити са нулом.


**Шта радити након читања Error Logа?**


1. **Исправите грешку**: У нашем примеру, можемо додати проверу да видимо да ли је делилац нула.

.. activecode:: errorlog4
   :coach:
   
   def podeli(a, b):
       if b == 0:
           return "Не можемо делити са нулом!"
       return a / b

  print(podeli(5,0))


2. **Тестирајте поново**: Поново покрените кôд да видите да ли је проблем решен.





Читање error logа може изгледати компликовано, али је веома важно за решавање проблема у програму. Када знате како да читате error log, лакше ћете пронаћи грешке и исправити их, а ваш програм ће радити без проблема!