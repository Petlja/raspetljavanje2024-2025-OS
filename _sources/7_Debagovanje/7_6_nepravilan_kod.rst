Процедура приступања коду који не ради правилно
=====================================================

Када пишемо програме, понекад се догоде грешке које узрокују да код не ради онако како би требало. У овој лекцији ћемо научити како да приступимо таквим проблемима и како да их решимо.

1. Пронађи Грешку

Први корак је да провериш поруку о грешци која се појављује када покренеш програм. Ова порука често даје важне информације о томе шта није у реду. На пример, ако добијеш поруку:

NameError: name 'x' is not defined


Ово значи да си покушао да користиш променљиву која није дефинисана.

2. Прочитај Поруку о Грешци

Пажљиво прочитај поруку о грешци. Често се у поруци налази информација о локацији грешке и њеном типу. Запиши ову поруку, јер ће ти помоћи да боље разумиш проблем.

3. Понови Проблем

Покушај поново да покренеш програм. Провери да ли су улазни подаци исти као пре. Понекад се проблем може појавити због промена које су направљене у коду, или због различитих података које користиш.

4. Погледај Део Кода

Врати се до дела кода где је настала грешка. Прочитај га пажљиво и размисли шта би могло бити погрешно. Питај се: Да ли сам заборавио да дефинишем променљиву? Да ли сам направио правописну грешку? Да ли сам исправно користио функције?

5. Искористи Дебагер

Ако користиш дебагер (алат за праћење извршавања програма), користи га да истражиш шта се дешава када програм ради. Можеш поставити "тачке прекида" (breakpoints) како би видео вредности променљивих и пратио ток програма. Ово ће ти помоћи да откријеш шта се тачно дешава у време извршавања.

6. Истражи Решења

Ако и даље не можеш да пронађеш грешку, потражи решења на интернету. Укуцај поруку о грешци у претраживач. Понекад можеш наћи чланке или форума где су други програмери имали сличне проблеме и решења за њих.

7. Исправи Грешку

Када пронађеш узрок грешке, исправи код. На пример, ако си заборавио да доделиш вредност некој променљивој, додај ту вредност. Ако си направио правописну грешку, исправи је. 

8. Тестирај Програм Поново

Након што си исправио грешку, поново покрени програм. Провери да ли сада ради исправно. Ако се грешка поново јави, врати се на претходне кораке и понови процес.

9. Запиши Своја Запажања

Када решиш проблем, запиши шта си научио. На пример: "Научио сам да треба да дефинишем све променљиве пре него што их користим." Ово ће ти помоћи да не правиш исте грешке у будућности.


Пример Кода који не ради правилно

.. code-block::  python
   

   x = 10
   y = 0
   rezultat = x / y
   print(rezultat)


1. Пронађи Грешку

У овом примеру добићемо грешку при покретању програма:


ZeroDivisionError: division by zero


2. Прочитај Поруку о Грешци

Порука о грешци нам каже да је дошло до покушаја дељења са нулом (`ZeroDivisionError`), што није дозвољено у математици.

3. Понови Проблем

Покрени програм поново и увери се да добијаш исту грешку.

4. Погледај Део Кода

Током анализе кода примећујемо да је друга променљива `y` подешена на 0, што узрокује грешку.

5. Искористи Дебагер

Када би користили дебагер, могли бисмо зауставити програм пре извршавања операције дељења и видети да је `y` вредност 0.

6. Истражи Решења

Решење је једноставно: проверити да ли је `y` нула пре извршавања дељења. То можемо урадити додатном провером:

.. code-block:: python
   

   if y != 0:
       rezultat = x / y
       print(rezultat)
   else:
       print("Не може се делити са нулом!")


7. Исправи Грешку

Исправили смо грешку додавањем провере да ли је `y` различито од нуле пре дељења.

8. Тестирај Програм Поново

Сада програм ради исправно, и ако је `y` 0, исписује поруку о томе да се не може делити са нулом.

9. Запиши Своја Запажања

Записао сам да увек треба проверити вредност променљиве пре операција које могу изазвати грешке, као што је дељење.



Закључак

Процес дебаговања је важан део програмирања. Често се грешке јављају, али уз стрпљење и методичан приступ, могу се брзо решити. Будите увек радознали и истражите шта стоји иза сваке грешке!