Рекурзија
==========


.. infonote::
    
    **Рекурзија** је техника у програмирању где функција позива саму себе како би решила неки проблем. То је користан начин за решавање задатака који се могу поделити на мање, сличне проблеме. Идеја је да се проблем разлаже све док не стигнемо до најједноставнијег случаја, који можемо директно решити.

**Кључни елементи рекурзије:**

1. **Базни случај** (основни случај): То је најједноставнији случај који функција може решити без позивања саме себе. Ово је услов који прекида рекурзију.
2. **Рекурзивни случај**: Ово је део где функција позива саму себе да реши мањи део проблема, приближавајући се базном случају.

**Пример 1: Функција за рачунање факторијела**
----------------------------------------------------

**Факторијел броја** (n!) је производ свих природних бројева од 1 до n. Факторијел броја се дефинише као:
- 5! = 5 * 4 * 3 * 2 * 1 = 120

Корак по корак објашњење:

1. **Базни случај**: Факторијел броја 1 је 1 (1! = 1). То је најједноставнији случај који се не може више разложити.
2. **Рекурзивни случај**: За било који други број n, факторијел се израчунава тако што се број n помножи са факторијелом броја n-1. Овако се проблем своди на мањи и мањи број, док не стигнемо до 1.

Пример кода:

.. activecode:: rekurzija100
   :coach:

   def faktorijel(n):
       if n == 1:  # Базни случај
           return 1
       else:
           return n * faktorijel(n - 1)  # Рекурзивни случај

   print(faktorijel(5))  # Излаз: 120


**Објашњење корак по корак (5!):**

1. **faktorijel(5)** позива **faktorijel(4)**.
2. **faktorijel(4)** позива **faktorijel(3)**.
3. **faktorijel(3)** позива **faktorijel(2)**.
4. **faktorijel(2)** позива **faktorijel(1)**.
5. **faktorijel(1)** враћа 1 (базни случај).
6. Враћају се вредности уназад:

    - **faktorijel(2)** враћа 2 * 1 = 2.
    - **faktorijel(3)** враћа 3 * 2 = 6.
    - **faktorijel(4)** враћа 4 * 6 = 24.
    - **faktorijel(5)** враћа 5 * 24 = 120.

**Пример 2: Рекурзија за Фибоначијев низ**
----------------------------------------------

**Фибоначијев низ** је низ бројева где је сваки број збир два претходна броја. Први бројеви су:
- 0, 1, 1, 2, 3, 5, 8, 13...

Фибоначијев низ се дефинише овако:

- F(0) = 0
- F(1) = 1
- F(n) = F(n-1) + F(n-2) за n > 1

Корак по корак објашњење:

1. **Базни случај**: Фибоначијев низ за n = 0 је 0 и за n = 1 је 1.
2. **Рекурзивни случај**: За сваки n > 1, Фибоначијев број је збир два претходна броја.

Пример кода:

.. activecode:: rekurzija101
   :coach:

   def fibonaci(n):
       if n == 0:  # Базни случај
           return 0
       elif n == 1:  # Базни случај
           return 1
       else:
           return fibonaci(n-1) + fibonaci(n-2)  # Рекурзивни случај


Позив функције:


.. activecode:: rekurzija102
   :coach:
   

   print(fibonaci(5))  # Излаз: 5


**Објашњење корак по корак (Фибоначи за n=5):**

1. **fibonaci(5)** позива **fibonaci(4)** и **fibonaci(3)**.
2. **fibonaci(4)** позива **fibonaci(3)** и **fibonaci(2)**.
3. **fibonaci(3)** позива **fibonaci(2)** и **fibonaci(1)**.
4. **fibonaci(2)** позива **fibonaci(1)** и **fibonaci(0)**.
5. Базни случајеви се враћају: **fibonaci(1)** = 1, **fibonaci(0)** = 0.
6. Резултати се сабирају и враћају према горе:

    - **fibonaci(2)** = 1 + 0 = 1.
    - **fibonaci(3)** = 1 + 1 = 2.
    - **fibonaci(4)** = 2 + 1 = 3.
    - **fibonaci(5)** = 3 + 2 = 5.

**Пример 3: Пребројавање елемената у листи помоћу рекурзије**
---------------------------------------------------------------

Овај пример показује како можемо да користимо рекурзију за пребројавање елемената у листи.

Корак по корак објашњење:

1. **Базни случај**: Ако је листа празна, број елемената је 0.
2. **Рекурзивни случај**: Узимамо први елемент листе и пребројавамо остатак листе.

Пример кода:

.. activecode:: rekurzija103
   :coach:

   def broj_elemenata(lista):
       
	   if lista == []:  # Базни случај
           return 0
       else:
           return 1 + broj_elemenata(lista[1:])  # Рекурзивни случај


Позив функције:

.. activecode:: rekurzija104
   :coach:

   lista = [1, 2, 3, 4, 5]
   print(broj_elemenata(lista))  # Излаз: 5


**Објашњење корак по корак:**

1. **broj_elemenata([1, 2, 3, 4, 5])** враћа 1 + **broj_elemenata([2, 3, 4, 5])**.
2. **broj_elemenata([2, 3, 4, 5])** враћа 1 + **broj_elemenata([3, 4, 5])**.
3. Овај процес се наставља док листа не постане празна.
4. Када листа постане празна, враћа се 0, а резултати се сабирају.


Рекурзија је моћна техника која омогућава решавање сложених проблема тако што их своди на једноставније верзије самих себе. Основни принцип рекурзије је дефинисање базног случаја који прекида рекурзију и рекурзивног случаја који решава мањи део проблема и понавља се док се не стигне до решења.