Концепт улазних аргумената
======================================================


.. infonote::

   Улазни аргументи су вредности које прослеђујемо функцији или програму како би они могли да изврше одређену радњу. Функције представљају блокове кода који извршавају одређене задатке, 
   а улазни аргументи су подаци који тим функцијама омогућавају да обаве тај задатак. Параметри су променљиве унутар дефиниције функције, док су аргументи вредности које прослеђујемо 
   функцији када је позовемо. 


Пример у стварном животу:

Замислите да правите колач по рецепту. Састојци које додате у смесу су улазни аргументи. Без састојака (улазних аргумената), колач се не може направити, а врста састојака (аргумената) 
одређује како ће коначни производ изгледати.

Типови улазних аргумената:

1. **Неименовани (позициони) аргументи**:
   Ово су аргументи који се прослеђују функцији у тачно одређеном редоследу. Позиција сваког аргумента је битна, јер функција очекује да добије податке у унапред одређеном редоследу.

   Пример:
 
.. activecode:: argumenti1
   :coach:
 
   def predstavi_osobu(ime, godine, grad):
       print(ime, "има", godine, "година и живи у", grad, "-у.")
   
   predstavi_osobu("Петар", 30, "Београд")
   

У овом примеру:

- Функција **predstavi_osobu** прима три неименована аргумента: ime, godine и grad.
- Аргументи се прослеђују функцији у тачно дефинисаном редоследу: прво име, затим године, и на крају град. Ако промените редослед аргумената, добићете неочекивани излаз.

Излаз овог програма ће бити:  

**"Петар има 30 година и живи у Београду."**

2. **Именовани аргументи**:

   Када прослеђујемо вредности као парове кључ-вредност, тако да је јасно шта сваки аргумент представља. Ово нам омогућава да редослед аргумената не буде пресудан, јер функција тачно 
   зна која вредност иде у који аргумент.


   Пример:
   
.. activecode:: argumenti2
   :coach:
   
   def informacije(ime, godine):
       print(ime, "има", godine, "година.")
   
   informacije(godine=25, ime="Марија")
  

У овом случају, аргументи **ime** и **godine** су прослеђени у различитом редоследу, али функција и даље правилно препознаје која вредност припада ком аргументу.

Излаз овог програма ће бити:  

**"Марија има 25 година."**

Предности коришћења улазних аргумената:

- **Флексибилност**: Функције постају генерализоване и могу да раде са различитим улазним подацима.
- **Јасноћа кода**: Именовани аргументи побољшавају читљивост кода, јер је одмах јасно шта сваки аргумент представља.
- **Редослед улазних података**: Код позиционих аргумената је важно да улазе прослеђујемо у исправном редоследу, док код именованих аргумената можемо мењати редослед без нарушавања функционалности.


Позициони и именовани аргументи
=======================================


Улазни аргументи су кључни концепт у програмирању који омогућава функцијама да раде са различитим подацима и извршавају специфичне радње. Позициони аргументи се ослањају на редослед, 
док именовани аргументи омогућавају већу флексибилност. Разумевање оба типа аргумената је важно за ефикасно писање кода.


**1. Увод у параметре и враћање вредности**  
Функције су веома корисне јер омогућавају поновну употребу кода. Параметри омогућавају да функција прима податке, а `return` омогућава да функција врати резултат који 
може да се користи у даљем програму.  

**Пример:**  

.. activecode:: funkcije200
   :coach:
   
   def pozdrav(ime):
       print("Zdravo", ime)

   # Pozivanje funkcije
   pozdrav("Ana")  # Output: Zdravo, Ana!
   pozdrav("Marko")  # Output: Zdravo, Marko!




**2. Позивање функција са аргументима**  
Параметри су променљиве унутар дефиниције функције, док су аргументи вредности које прослеђујемо функцији када је позовемо.  

- **Позициони аргументи:** Прослеђују се по редоследу.  
- **Именовани аргументи:** Прецизирамо име параметра при позиву функције.  

**Пример:**  

.. activecode:: funkcije201
   :coach:

   def sabiranje(a, b):
       return a + b

   # Pozicioni argumenti
   rezultat1 = sabiranje(5, 3)
   print(rezultat1)  # Output: 8

   # Imenovani argumenti
   rezultat2 = sabiranje(b=10, a=2)
   print(rezultat2)  # Output: 12




**3. Враћање вредности из функција**  
Функције могу враћати резултат помоћу кључне речи `return`. Без `return`, функција само извршава задатке, али не враћа податке.  

**Пример:**  

.. activecode:: funkcije202
   :coach:

   def kvadrat(broj):
       return broj ** 2

   rezultat = kvadrat(4)
   print(rezultat)  # Output: 16


**Напомена:** Када функција дође до `return`, прекида се њено извршавање.  



**4. Више повратних вредности**  
Функције могу враћати више вредности користећи торке. Ово је корисно када треба да се израчуна више повезаних резултата.  

**Пример:**  

.. activecode:: funkcije203
   :coach:

   def obim_i_povrsina(precnik):
       poluprecnik = precnik / 2
       obim = 2 * 3.14 * poluprecnik
       povrsina = 3.14 * (poluprecnik ** 2)
       return obim, povrsina

   rez_obim, rez_povrsina = obim_i_povrsina(10)
   print("Obim:", rez_obim, "Površina:", rez_povrsina)
   # Output: Obim: 31.4, Površina: 78.5




**5. Напредни примери**
- **Пример 1:** Функција за конверзију температуре.  

.. activecode:: funkcije204
   :coach:

   def celsius_u_fahrenheit(c):
       return (c * 9/5) + 32

   temp_c = 25
   temp_f = celsius_u_fahrenheit(temp_c)
   print(temp_c,"°C", "=", temp_f, "°F")
   # Output: 25°C = 77.0°F


- **Пример 2:** Функција за обраду текста.  

.. activecode:: funkcije205
   :coach:
   
   def obrada_teksta(tekst):
       duzina = len(tekst)
       veliki = tekst.upper()
       mali = tekst.lower()
       return duzina, veliki, mali

   rez_duzina, rez_veliki, rez_mali = obrada_teksta("Programiranje")
   print("Dužina:", rez_duzina, "Velika slova:", rez_veliki, "Mala slova:", rez_mali)
   # Output: Dužina: 12, Velika slova: PROGRAMIRANJE, Mala slova: programiranje



.. infonote:: **Закључак**  

   Кроз ову лекцију ћете разумети како да користите параметре и повратне вредности да би креирали ефикасне и прилагодљиве функције. Ови концепти су основа за напредније теме попут рекурзије 
   и рада са речницима.  
