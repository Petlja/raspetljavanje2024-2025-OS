Логичке операције
=================

Логичке операције су операције које се извршавају над логичким вредностима. Улаз и излаз логичке операције су две логичке вредности.
Излаз је логичка вредност и зависи од улазних вредности.

Логичке операције које ћемо радити су:

- и (**and**)
- или (**or**)
- негација (**not**)

.. infonote::
    
    Логичке операције функционишу на исти начин као и аритметичке операције (сабирање, одузимање, множење, дељење...). Само се уместо бројева користе логичке вредности.


Операција и (and)
---------------------

Операција и се означава симболом **and**. Излаз је **True** ако су оба улаза **True**. У осталим случајевима излаз је **False**.

+----------------+-------------------+---------------+
| **Улаз 1**     | **Улаз 2**        | **Излаз**     |
+================+===================+===============+
| True           | True              | True          |
+----------------+-------------------+---------------+
| True           | False             | False         |
+----------------+-------------------+---------------+
| False          | True              | False         |
+----------------+-------------------+---------------+
| False          | False             | False         |
+----------------+-------------------+---------------+

.. questionnote::

    Да би особа могла да се такмичи на такмичењу, мора да има мање од 18 година а више од 12 година.
    Написати програм који проверава да ли особа може да се такмичи на такмичењу ако је унет број година особе.

.. activecode:: logicke_operacije_1.py
    :coach:

    godine = int(input("Unesite broj godina: "))

    if godine < 18 and godine > 12:
        print("Osoba može da se takmiči na takmičenju.")
    else:
        print("Osoba ne može da se takmiči na takmičenju.")

Операција или (or)
----------------------

Операција или се означава симболом **or**. Излаз је **True** ако је бар један од улаза **True**. У осталим случајевима излаз је **False**.

+----------------+-------------------+---------------+
| **Улаз 1**     | **Улаз 2**        | **Излаз**     |
+================+===================+===============+
| True           | True              | True          |
+----------------+-------------------+---------------+
| True           | False             | True          |
+----------------+-------------------+---------------+
| False          | True              | True          |
+----------------+-------------------+---------------+
| False          | False             | False         |
+----------------+-------------------+---------------+

.. activecode:: logicke_operacije_2.py
    :coach:

    # Menjaj sledeće vrednosti i vidi kako se menja izlaz
    a = True
    b = False
    print(a or b)

Операција негација (not)
----------------------------

Операција негација се означава симболом **not**. За разлику од прошле две операције негација прима само један параметар. 
Излаз је **True** ако је улаз **False**. Излаз је **False** ако је улаз **True**.

+----------------+---------------+
| **Улаз**       | **Излаз**     |
+================+===============+
| True           | False         |
+----------------+---------------+
| False          | True          |
+----------------+---------------+

.. activecode:: logicke_operacije_3.py
    :coach:
    
    # Menjaj sledeće vrednosti i vidi kako se menja izlaz
    a = True
    print(not a)


Ево неколико једноставних примера који показују како се користе логички оператори **и** (`and`), **или** (`or`), и **не** (`not`) у Пajтону.

**Пример 1**: Услов са `and` (и)
```````````````````````````````````

Оператор `and` се користи када желимо да оба услова буду истинита.

.. activecode:: logicke_operacije_4.py
    :coach:


   age = 20
   has_id = True

   if age >= 18 and has_id:
       print("Особа може ући.")
   else:
       print("Улаз није дозвољен.")


**Објашњење**: Овде је услов за улаз да је `age` веће или једнако 18 **и** да особа има личну карту (`has_id`). Ако су оба услова испуњена, добијамо поруку "Особа може ући." Иначе, исписује се "Улаз није дозвољен."

**Пример 2**: Услов са `or` (или)
```````````````````````````````````

Оператор `or` се користи када је довољно да бар један од услова буде истинит.

.. activecode:: logicke_operacije_5.py
    :coach:
	
   day = "Saturday"
   is_holiday = False

   if day == "Saturday" or day == "Sunday" or is_holiday:
       print("Данас је слободан дан.")
   else:
       print("Данас је радни дан.")


**Објашњење**: Овде се проверава да ли је дан `Saturday` (субота), `Sunday` (недеља), или је `is_holiday` (празник). Ако је бар један од услова истинит, добијамо поруку "Данас је слободан дан." Ако ниједан није тачан, исписује се "Данас је радни дан."

**Пример 3**: Услов са `not` (не)
```````````````````````````````````

Оператор `not` се користи да обрне вредност услова — ако је услов `True`, `not` га чини `False` и обрнуто.

.. activecode:: logicke_operacije_6.py
    :coach:

   is_raining = False

   if not is_raining:
       print("Време је лепо, можемо напоље!")
   else:
       print("Пада киша, остаћемо унутра.")


**Објашњење**: Овде услов `not is_raining` проверава да ли не пада киша. Ако је `is_raining` `False`, онда је `not is_raining` `True`, па добијамо поруку "Време је лепо, можемо напоље!" Ако `is_raining` постане `True`, онда ће се исписати "Пада киша, остаћемо унутра."

**Пример 4**: Комбиновање `and`, `or` и `not`
```````````````````````````````````````````````

Понекад је потребно комбиновати више оператора.

.. activecode:: logicke_operacije_7.py
    :coach:
	
   temperature = 25
   is_sunny = True
   is_raining = False

   if (temperature > 20 and is_sunny) or not is_raining:
       print("Идеално време за шетњу.")
   else:
       print("Боље да останемо код куће.")


**Објашњење**: Овде се проверава да ли је температура изнад 20 и сунчано, **или** да не пада киша. Ако је било који од ових услова истинит, добијамо поруку "Идеално време за шетњу." Ако ниједан услов није истинит, исписује се "Боље да останемо код куће."
	
	

