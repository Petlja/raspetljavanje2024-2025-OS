Променљиве и типови података
==============================



Меморија
--------

.. raw:: html

   <iframe width="780" height="420" src="https://www.youtube-nocookie.com/embed/28rf911JhNU?si=2Jv4s7XYK51Wv3mr" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

Меморија је основна компонента у рачунарству и биологији која служи за складиштење и чување информација које можемо користити касније. У контексту људског мозга, меморија је способност да 
памтимо и сећамо се информација, искустава и знања. Код рачунара, меморија је систем који складишти податке и програме које рачунар користи за обраду задатака. 

Ево како функционише меморија у различитим контекстима:

1. **Меморија код људи**:

   - Подељена је на краткорочну и дугорочну меморију.
   - **Краткорочна меморија** омогућава да се сетимо информација на кратко време, као што је, рецимо, број телефона који смо управо чули.
   - **Дугорочна меморија** чува податке дуже време, од неколико дана до година, и укључује важне догађаје, знање и вештине.

2. **Меморија у рачунарству**:

   - Меморија је одговорна за чување података које процесор користи током обраде.
   - Постоји **радна меморија (RAM)** која се користи за привремено чување података док рачунар ради. Када се рачунар искључи, подаци у овој меморији нестају.
   - **Чврсти диск (HDD)** или **SSD** меморија чувају податке и када је рачунар искључен, па су погодни за дугорочно складиштење.

Меморија је кључна јер омогућава да се информације могу вратити и поново користити, било да је реч о личном сећању, знању или подацима неопходним за рад неког уређаја.


Променљиве
-----------

Текст и бројеве које желимо да користимо више пута можемо сачувати у променљиве. Променљиве служе да рачунар запамти вредности које смо му задали.
Сваку променљиву можемо да замислимо као полицу на којој нешто чувамо. У сваком тренутку то нешто можемо склонити са полице и заменити нечим другим. 
Ако имамо невероватно велики број полица, потребно нам је да им дајемо одговарајуће називе да бисмо се снашли (као што у библиотеци постоје полице за 
белетристику, поезију, крими-романе, стручну литературу итд).

Променљива је, дакле, простор у меморији рачунара коме смо дали неко име. Важно је да име које смо простору дали буде такво да јасно означава шта се у 
простору чува и да нам помогне да се снађемо у коду. У том простору чувамо неку учитану или израчунату вредност. Као име променљиве обично користимо 
низ слова енглеске абецеде. У именима могу још да се појаве и слова других језика, доње црте и цифре, али цифра не може да буде на првом месту.

Примери добрих имена променљивих:

1. **totalScore**: Име јасно објашњава да променљива чува укупни резултат, што олакшава разумевање кода.
   

2. **userAge**: Име одмах открива да је у питању старост корисника, што је корисно када више променљивих има везе са подацима корисника.


3. **isLoggedIn**: Променљива указује на логичку (булову) вредност која означава да ли је корисник пријављен или не. Префикс "is" наговештава да ће вредност бити **true** или **false**, што помаже код читљивости.


4. **numberOfItemsInCart**: Ова променљива јасно дефинише да се ради о броју артикала у корпи, што повећава читљивост и помаже другом програмеру да разуме кôд без додатних коментара.


Примери лоших имена променљивих:

1. **x**: Само по себи, име "x" не говори шта представља. Може се користити у математичким прорачунима, али у већини других случајева не даје довољно информација о томе шта променљива представља.


2. **data**: Сувише опште име. У програму са више података, неће бити јасно на који тачно тип података се односи. Боље је користити конкретније име попут **userData** или **salesData** како би било јасније шта променљива представља.


3. **temp**: Ово је често коришћено име за привремене променљиве, али у великом пројекту може довести до забуне. Уместо **temp**, боље је користити описнија имена попут **temporaryFile** или **temporarySum**, јер ће бити очигледније шта променљива привремено чува.


4. **a, b, c**: Када променљиве немају значајна имена, као у случају "a", "b", "c", постаје тешко схватити њихову улогу у коду. Уместо тога, треба користити описне називе попут **startDate**, **endDate**, **userScore** да би се одмах разумело шта представљају.


Како побољшати лоша имена:

- Уместо **x**, користите **positionX** ако означава координату.
- Уместо **data**, користите **transactionData**, **logData** или **configData**, у зависности од тога о којој врсти података је реч.
- Уместо **temp**, користите **temporaryResult** или **tempBuffer** ако складишти привремену вредност.

Описна имена повећавају читљивост и разумљивост кода, што је кључно за одржавање и сарадњу на пројектима.





Како нам фиока користи?
------------------------

- Можемо да прикажемо шта се налази у фиоци. За то нам користи наредба print(broj) где је broj име фиоке или променљиве

- Можемо да променимо садржај фиоке наредбом доделе "=", broj=5

- Можемо да се питамо да ли се у фиоци налази одређени податак оператором "==", на пример broj==10 (Да ли се у фиоци налази broj 10)? 


.. infonote::

  Обрати пажњу да се **=** користи када променљивој **додељујемо** вредност, а да се **==** користи за **поређење** да ли су две вредности једнаке.



Када користимо симбол „=”, то је такозвани **оператор доделе**. Његова сврха је да нешто „додели” или „смести” у променљиву, слично као када стављамо нешто у фиоку.

Замислимо променљиву као фиоку у коју можемо да сместимо различите вредности. Када напишемо: `broj = 5`, овај израз значи да **додељујемо вредност 5 променљивој (или фиоци) „broj”**.

.. infonote:: Како ради оператор доделе?

   **Лева страна („broj”)**: 
   
   Пре оператора „=”, налази се име променљиве. У овом случају, то је „broj”. Име променљиве је као етикета на фиоци — оно идентификује место у 
   меморији где ће се чувати вредност.
      
   **Десна страна („5”)**: 
   
   После оператора „=”, налази се вредност коју желимо да сместимо у ту променљиву. У овом случају, вредност је број 5. Ово може бити било која 
   вредност коју програм треба да памти и користи касније.

   Када извршимо овај израз, рачунар чита „broj = 5” као инструкцију да стави вредност 5 у „фиоку” означену именом „broj”.


Назива се оператор доделе зато што израз на десној страни „додељује” вредност у променљиву са леве стране. Овим оператором говоримо рачунару: „Узми вредност са десне 
стране и смести је у променљиву са леве стране.”

Овај поступак омогућава да, кад год позовемо променљиву „broj”, рачунар врати вредност која се налази у њој — у овом случају, број 5.


Ево примера који показује како се променљива мења у кратком програму. На овај начин можемо и поставити питање о томе која ће вредност променљива имати на крају.

Замислите да имамо следећи код:

.. code-block:: python

   x = 1
   x = 2
   x = 3


.. questionnote::

   Коју вредност ће променљива **x** имати на крају овог програма?

Објашњење:

- Први ред **x = 1**: Овде додељујемо вредност 1 променљивој **x**.
- Други ред **x = 2**: У овом кораку мењамо вредност променљиве **x** на 2. Претходна вредност (1) се замењује новом вредношћу.
- Трећи ред **x = 3**: Поново мењамо вредност променљиве **x**, сада на 3. Претходна вредност (2) се брише и замењује новом вредношћу.

.. infonote::

   На крају програма, вредност променљиве **x** биће **3**, јер је то последња додељена вредност. Свака наредна линија замењује претходну вредност, тако да се рачунар увек „сећа” само 
   последње додељене вредности.




Променљиву користимо навођењем њеног имена:

.. activecode:: promenljive10

   
   ime = "Marija"
   print("Zdravo, ja se zovem", ime)
   print("Ime", ime, "dobila sam ime po mojoj baki koja se takođe zove", ime)
   
.. questionnote::
   
   У свом радном окружењу направи фајл под називом zanimljivost_o_imenu.py и промени га тако да исписује твоје име и неку занимљивост о њему.


Типови података
----------------

Python подржава више различитих типова података који се користе за чување и рад са вредностима. 
Најчешћи типови података укључују целе бројеве, реалне бројеве (децимале), стрингове, логичке 
вредности и сложеније структуре као што су листе и речници.


Цео број (Integer)
```````````````````

Цели бројеви су бројеви без децимала, као што су 1, 42 или -100. У наредном примеру користимо променљиве x, y.
Прво им додељујемо вредности 10 и -3 а потом приказујемо њихов садржај, односно вредности.

.. activecode:: tipovi1
   :coach:

   x = 10
   y = -3
   print(x)
   print(y)


Можете извршавати основне математичке операције са целим бројевима, као што су сабирање, одузимање, множење и дељење.
У овом примеру користимо променљиве sabiranje, množenje, oduzimanje и deljenje за чување резултата ових операција 
примењених над бројевима који се налазе у променљивама a и b:

.. activecode:: tipovi2
   :coach:

   a = 5
   b = 2
   sabiranje = a + b
   mnozenje = a * b
   oduzimanje = a - b
   deljenje = a / b
   print(sabiranje, mnozenje, oduzimanje, deljenje)


Реални број (Float)
`````````````````````

Реални бројеви (floating point) су бројеви са децималама, попут 3.14 или -0.001. 
Они представљају бројеве који могу имати вредности изражене у разломцима и често се користе у 
математичким и научним прорачунима, где су потребне прецизне децималне вредности. 
Реални бројеви су корисни за рад са вредностима као што су мерења, проценти и сви 
прорачуни који захтевају прецизност већу од бројева.

.. activecode:: tipovi3
   :coach:

   pi = 3.14159
   tezina = 70.5
   print(pi)
   print(tezina)


Python такође подржава операције са реалним бројевима. Могуће је изводити основне аритметичке операције као што су сабирање, 
одузимање, множење и дељење, али и сложеније прорачуне уз помоћ математичких функција из библиотеке **math**. 
При раду са реалним бројевима треба бити опрезан због могућих грешака у прецизности услед начина на који се они чувају у меморији.

.. activecode:: tipovi4
   :coach:

   a = 7.5
   b = 2.3
   zbir = a + b
   proizvod = a * b
   print(zbir, proizvod)



Стринг (String)
`````````````````

Стринг је низ знакова обухваћен двоструким или једноструким наводницима. Стринг може садржати слова, бројеве и симболе. 
У Пајтону, стрингови су веома флексибилни и омогућавају разне операције, као што су спајање стрингова, издвајање подниза, 
пребројавање карактера и претрага садржаја. Стринг се сматра неизмењивом структуром података, што значи да се, 
када се једном креира, његов садржај не може мењати директно, већ се прави нови стринг ако су потребне измене.

.. activecode:: tipovi5
   :coach:
   
   ime = "Marija"
   poruka = 'Zdravo, Svete!'
   print(ime)
   print(poruka)
   
   

Испис целих бројева, реалних бројева и стрингова 
```````````````````````````````````````````````````

Пајтон препознаје тип податка који се додељује променљивој и та променљива постаје променљива тог типа након доделе вредности. 
Ова динамичка додела омогућава флексибилност при раду са променљивама, јер није потребно експлицитно наводити тип податка 
приликом декларисања. Можете исписивати различите типове података као што су целобројни (integer), реални бројеви (floating point), 
стрингови (string) и логичке променљиве (boolean). Пајтон аутоматски препознаје и управља овим типовима, чинећи кôд једноставнијим 
за читање и писање, али је важно бити свестан типова података због специфичних операција које су могуће за сваки тип.

.. activecode:: tipovi6
   :coach:

   x = 42
   y = 3.14
   ime = "Marija"
   print(x, y, ime)
   
   

Комбиновање типова података
`````````````````````````````

Користећи зарезе, можете комбиновати више различитих типова у једном исказу. На пример, у функцији **print()** можете истовремено исписати целобројне,
реалне бројеве, стрингове и логичке вредности одвајајући их зарезима. Овим приступом Пајтон аутоматски претвара сваки тип у текстуални облик и 
исписује их заједно, раздвојене размаком. Ово је корисно за исписивање порука које садрже различите врсте информација и чини кôд јаснијим и 
лакшим за разумевање.

.. activecode:: tipovi7
   :coach:

   x = 42
   y = 3.14
   print("Rezultat je:", x, "a broj pi je:", y)
   
 
Логички тип (Boolean)
`````````````````````

Логичке вредности у Python-у могу бити само **True** или **False**. Најчешће се користе у условним исказима, где омогућавају програму да донесе 
одлуке на основу одређених услова. Логичке вредности настају из поређења између података (нпр. **5 > 3** враћа **True**) или из логичких операција 
(**and**, **or**, **not**). Овај тип податка је веома важан за контролу тока програма и управљање извршавањем одређених делова кода.

.. activecode:: tipovi8
   :coach:
   
   tacno = True
   netacno = False
   print(tacno)
   print(netacno)


Логичке вредности
------------------


Логичке вредности се добијају коришћењем оператора за поређење, као што су **==**, **!=**, **>**, **<**, **>=**, **<=**. Ови оператори омогућавају 
поређење вредности и враћају **True** ако је услов испуњен, или **False** ако није. На пример, израз **5 == 5** враћа **True**, док **5 != 3** 
такође враћа **True**, јер су ови услови тачни. Оператори за поређење су основа за прављење услова који контролишу ток програма, 
омогућавајући доношење одлука у зависности од вредности које се пореде.

.. activecode:: tipovi9
   :coach:

   a = 5
   b = 10
   print(a > b)  # False
   print(a < b)  # True
   

Основни оператори за поређење 
```````````````````````````````

Логички оператори упоређују две вредности и враћају **True** или **False** на основу резултата поређења. Ево неких основних оператора за поређење:
 
1. **==** (једнако): Враћа **True** ако су обе вредности једнаке.
 
 
.. activecode:: tipovi15
   :coach: 
   
   x = 5
   y = 5
   rezultat = (x == y)  # Враћа True
   print(rezultat)
   
2. **!=** (није једнако): Враћа **True** ако су вредности различите.
 
.. activecode:: tipovi16
   :coach: 
   
   x = 5
   y = 10
   rezultat = (x != y)  # Враћа True
   print(rezultat)
   
3. **>** (веће): Враћа **True** ако је прва вредност већа од друге.

.. activecode:: tipovi17
   :coach:   
   
   x = 10
   y = 5
   rezultat = (x > y)  # Враћа True
   print(rezultat)
   
4. **<** (мање): Враћа **True** ако је прва вредност мања од друге.

.. activecode:: tipovi18
   :coach:   
   
   x = 5
   y = 10
   rezultat = (x < y)  # Враћа True
   print(rezultat)
   
5. **>=** (веће или једнако): Враћа **True** ако је прва вредност већа до једнака другој.
 
.. activecode:: tipovi19
   :coach:  
   
   x = 5
   y = 5
   rezultat = (x >= y)  # Враћа True
   print(rezultat)
   
6. **<=** (мање или једнако): Враћа **True** ако је прва вредност мања до једнака другој.

.. activecode:: tipovi20
   :coach:   
   
   x = 5
   y = 10
   rezultat = (x <= y)  # Враћа True
   print(rezultat)
  
Погледај следећу анимацију која приказује разлику између оператора доделе и оператора поређења:

.. image:: ../../_images/promenljive2.gif
   :width: 800 px
   :alt: alternate text

Покрени следећи кôд и види како се вредност променљиве мења: 

.. activecode:: tipovi_animacija

   broj1 = 5 # promenljvoj broj1 dodeljujemo vrednost 5
   broj2 = 10 # promenljvoj broj2 dodeljujemo vrednost 10
   broj3 = 19 # promenljvoj broj3 dodeljujemo vrednost 15

   print(broj1, broj2, broj3) # pristupamo vrednostima smeštenim u promenljivima po njihovim imenima
   print(broj1==5, broj1==10) # koristimo operator poređenja da proverimo da li je vrednost promenljive broj1 5 ili 10 

   broj1 = 10 # promeljivoj broj1 operatorom dodele dodeljujemo novu vrednost, 10 
   print(broj1) # pristupamo vrednosti promeljive broj1, koja je sada 10 

Конверзија између типова података  
----------------------------------

Конверзија између типова података подразумева претварање једне врсте података у другу. У већини програмских језика, ово се ради аутоматски (имплицитна конверзија) или експлицитно помоћу посебних функција.

Ево неколико примера за експлицитну конверзију (познату као кастинг) у Пајтону:

1. Конверзија из string-а у број (integer): Претварање string-а који садржи број у integer.

.. activecode:: tipovi10
   :coach:

   str_num = "123"
   int_num = int(str_num)
   print(int_num)  


2. Конверзија из броја у string: Претварање integer-а у string.


.. activecode:: tipovi11
   :coach:

   int_num = 456
   str_num = str(int_num)
   print(str_num)  


3. Конверзија из float-а у integer: Претварање броја са децималом у цео број (децимале се одбацују).


.. activecode:: tipovi12
   :coach:

   float_num = 9.99
   int_num = int(float_num)
   print(int_num)  


4. Конверзија из integer-а у float: Претварање целог броја у број са децималом.


.. activecode:: tipovi13
   :coach:

   int_num = 7
   float_num = float(int_num)
   print(float_num)  


5. Конверзија из int интегера у boolean: Претварање целог броја у boolean вредност (0 је False, све остало је True)


.. activecode:: tipovi14
   :coach:

   int_num = 0
   bool_value = bool(int_num)
   print(bool_value)  

Свака конверзија треба да буде пажљива, посебно када радимо са различитим типовима података, 
како би се избегле грешке попут неадекватних формата или губитка података.
   


.. infonote:: Резиме

   - Цео број (Integer): Бројеви без децимала, нпр. **42**, **-10**.
   - Реални број (Float): Бројеви са децималама, нпр. **3.14**, **-0.01**.
   - Стринг (String): Низ знакова у наводницима, нпр. **"Zdravo"**, **'Python'**.
   - Логички тип (Boolean): Логичке вредности **True** и **False**.


   Ови типови података представљају основе за рад са подацима у Python-у.


