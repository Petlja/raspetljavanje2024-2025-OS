Испис - print()
==================

.. infonote:: Шта је функција print()?  

   print() је уграђена Python функција која исписује вредности у конзолу.


У претходној лекцији о покретању програма видели смо у примеру да податке исписујемо користећи функцију print.
Хајде да погледамо функцију print поново. Можемо да пишемо текст или број, као у примеру:
   


.. activecode:: print1
   :coach:

   print("Zdravo, svete!")
   
   
Када функција print() има више аргумената, ти аргументи могу да буду различитог типа:


.. activecode:: print2
   :coach:

   print('2+2 =', 2+2)

Када наводимо више аргумената, пишемо их раздвојене зарезима (као код сваке функције). Вредности свих наведених аргумената ће бити 
приказане једна за другом, и биће раздвојене по једним размаком.
  
  
У следећем примеру исписани резултат изгледа непрегледно:
  
   
.. activecode:: print3
   :coach:   
   
   print(10/3)


Најчешће нам није важно да видимо све ове децимале. Прегледнији приказ реалних вредности можемо да добијемо користећи функцију format.
Помоћу ове функције можемо, на пример, да задамо колико децимала желимо да буде приказано:


.. activecode:: print31
   :coach:  

   x = 5/3
   s = format(x, '.2f')
   print(s)


Да бисмо задали број децимала које ћемо да прикажемо, функцију format смо позвали овако: први аргумент функције је вредност коју исписујемо,
а други аргумент је опис приказа. У овом опису део ’.2’ значи да желимо два децимална места, а део ’f’, скраћено од float, значи да дајемо 
опис за приказивање реалног броја (тип реалних бројева се зове float). Функција враћа стринг у коме је број x записан на тражени начин.
Истакнимо да ово подешавање приказа не утиче на вредност променљиве x, која и даље има све своје децимале. Пример смо разложили на кораке 
да би био јаснији, мада је могао да буде написан и у једној линији кода, на пример за испис са 4 децимале:

.. activecode:: print32
   :coach:

   print(format(5/3, '.4f'))


Када приказујемо више реалних бројева један испод другог, да би приказ био прегледнији пожељно је да децималне тачке буду поравнате. 
На пример, овакав приказ није нарочито прегледан:

.. activecode:: print33
   :coach:
   
   print(-1.23)
   print(7251.7)
   print(84.15)
   

Да бисмо добили прегледнији приказ, можемо функцију format да употребимо овако:

.. activecode:: print34
   :coach:
   
   print(format(-1.23, '8.2f'))
   print(format(7251.7, '8.2f'))
   print(format(84.15, '8.2f'))  
   
   
У опису ’8.2f’ број 8 значи да желимо да приказ броја заузме укупно 8 места. У тих 8 места се броје цифре, децимална тачка, 
евентуални знак броја и размаци испред броја. Делови описа ’.2’ и ’f’ имају исто значење као и раније.
Функција format има и многе друге могућности, од којих ћемо још неке упознати успут.   


Операције са стринговима
``````````````````````````


Надовезивање стрингова
--------------------------

Стрингови се могу надовезивати један на други операцијом надовезивања стрингова, која је позната и под именом конкатенација стрингова. 
Ова операција се означава знаком +, исто као и операција сабирања бројева, па се у програмирању она често неформално назива и сабирање стрингова.

.. activecode:: print35
   :coach:

   s = 'nast' + 'avak'
   print(s)

Повремено се дешава да у стрингу имамо запис целог или реалног броја, па је важно је да разумемо када се у програмима знак + односи на сабирање бројева, 
а када на надовезивање стрингова. На пример, у следећем програму прво а + б је сабирање бројева, а друго је сабирање (надовезивање) стрингова. 
У складу са тиме се разликују и исписани резултати (испробајте).

.. activecode:: print36
   :coach:

   a = 14.2
   b = 1
   print(a + b)

   a = '14.2'
   b = '1'
   print(a + b)
   
   
Вероватно ће се повремено догађати да касније при извршавању неког свог програма будете збуњени резултатом. Резултат може да буде различит од очекиваног 
из много разлога, а једна могућност је и да сте случајно сабирали стрингове уместо бројева. Знак + може да стоји између два бројчана израза или између 
два стринга, али не и између стринга и броја. Овакве комбинације доводе до грешке типа (TypeError), било да се сабира број са стрингом, или стринг са 
бројем (испробајте).

.. activecode:: print37
   :coach:
   
   print('2' + 2)


Умножавање стрингова
------------------------

Стрингови се могу и умножавати (мултиплицирати). То значи да је дозвољено помножити стринг целим бројем (било слева или здесна), 
а резултат је нови стринг, који се добија понављањем датог стринга задати број пута. У следећем примеру, црта којом подвлачимо 
сабирке добијена је множењем стринга ’-’ са 12.

.. activecode:: print38
   :coach:

   a = 1.23958
   b = 5467251.707256
   c = 384.150576
   zbir = a + b + c
   print(format(a, '12.2f'))
   print(format(b, '12.2f'))
   print(format(c, '12.2f'))
   print(12 * '-')
   print(format(zbir, '12.2f'))


Покрени претходни програм и пробај да измениш бројеве и симболе. Посматрај како се вредност израза мења.


Испис - За оне који желе да знају више
````````````````````````````````````````


Нови ред (`\n`) 
---------------- 

Користи се за прекид линије и премештање текста у нови ред.


.. activecode:: print4
   :coach:

   print("Prva linija\nDruga linija")
   
Табулатор (`\t`)  
-------------------

Табулатор користимо за уметање размака између речи.
   
.. activecode:: print5
   :coach:
   
   print("Kolona 1\tKolona 2\tKolona 3")



Параметар sep 
----------------
 
Користи се за прилагођавање симбола који раздваја елементе.
    
.. activecode:: print9
   :coach:
   
   print("Marija", "Petar", "Jovana", sep=", ")
   

Параметар end  
---------------

Можете прилагодити завршни карактер након исписа. Подразумевани је нови ред (`\n`).
    
.. activecode:: print10
   :coach:
   
   print("Ovo je kraj", end="!")
   print("Sledeća linija neće biti u novom redu.")
 


Заборављање на формат стрингова  
---------------------------------
    
Када се користе променљиве у print(), морате бити сигурни да су коректно форматиране. Овај исказ ће дати грешку јер је година у променљивој 'broj' податак типа integer.
    
.. activecode:: print14
   :coach: 
   
   godina = 23
   print("Petar ima" + godina + "godine.")


Исправљен исказ

.. activecode:: print15
   :coach: 
   
   godina = 23
   print("Petar ima " + str(godina) + " godine.")
   


